{"version":3,"file":"static/js/736.45b93d5b.chunk.js","mappings":"qSAEaA,E,QAAaC,EAAAA,GAAH,2H,SCMR,SAASC,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,WAAS,GAArC,eAAOK,EAAP,KAAeC,EAAf,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEID,GAAU,GAFd,UAG2BE,EAAAA,EAAAA,IAAYV,GAHvC,gBAGYG,EAHZ,EAGYA,KACRC,EAAQD,GACRK,GAAU,GALd,kDAOIF,GAAS,GACTK,EAAAA,OAAAA,QAAe,KAAMC,SARzB,yBAUIJ,GAAU,GAVd,8EADc,uBAAC,WAAD,wBAcdK,EACD,GAAE,CAACb,KAEF,gCACGG,EAAKW,OAAS,GACb,SAACjB,EAAD,UACGM,EAAKY,KAAI,SAAAC,GAAK,OACb,2BACE,gBAAKC,MAAM,QACTC,IAAG,yCAAoCF,EAAMG,cAC7CC,IAAKJ,EAAMK,QAEb,uBAAIL,EAAMK,SALHL,EAAMM,GADF,OAWjB,yBAAK,8BAENf,IAAU,SAACgB,EAAA,EAAD,IACVlB,IAAS,SAACmB,EAAA,EAAD,MAGf,C,oECnDM,SAASA,IACZ,OACI,uBAAG,gCAEV,C,6ECHM,SAASD,IACZ,OACJ,SAAC,KAAD,CACEE,OAAO,MACPR,MAAM,MACNS,MAAM,UACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,yBACVC,iBAAiB,GACjBC,iBAAiB,GACjBC,kBAAkB,IAGnB,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Error/Error.jsx","components/Loader/Loader.jsx"],"sourcesContent":["import styled from '@emotion/styled'\n\nexport const CastWraper = styled.ul`\nmargin:20px 0;\npadding: 0;\ndisplay: flex;\nflex-wrap: wrap;\ngap: 24px;\nlist-style-type: none;\n`","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastById } from 'servoces/Api';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Error } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\nimport {CastWraper} from './Cast.styled'\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(false);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        setLoader(true);\n        const { cast } = await getCastById(movieId);\n        setCast(cast);\n        setLoader(false);\n      } catch (error) {\n        setError(true);\n        Notify.failure(error.message);\n      } finally {\n        setLoader(false);\n      }\n    }\n    fetchMovies();\n  }, [movieId]);\n  return (\n    <>\n      {cast.length > 0 ? (\n        <CastWraper>\n          {cast.map(actor => (\n            <li key={actor.id}>\n              <img width='160px'\n                src={`https://image.tmdb.org/t/p/w300${actor.profile_path}`}\n                alt={actor.name}\n              />\n              <p>{actor.name}</p>\n            </li>\n          ))}\n        </CastWraper>\n      ) : (\n        <div>Sorry, there is no review</div>\n      )}\n      {loader && <Loader />}\n      {error && <Error />}\n    </>\n  );\n}\n","export function Error (){\n    return(\n        <p>Sorry, something went wrong!</p>\n    )\n}","import { ThreeCircles } from  'react-loader-spinner'\nexport function Loader(){\n    return(\n<ThreeCircles\n  height=\"100\"\n  width=\"100\"\n  color=\"#4fa94d\"\n  wrapperStyle={{}}\n  wrapperClass=\"\"\n  visible={true}\n  ariaLabel=\"three-circles-rotating\"\n  outerCircleColor=\"\"\n  innerCircleColor=\"\"\n  middleCircleColor=\"\"\n/>\n    )\n}"],"names":["CastWraper","styled","Cast","movieId","useParams","useState","cast","setCast","error","setError","loader","setLoader","useEffect","getCastById","Notify","message","fetchMovies","length","map","actor","width","src","profile_path","alt","name","id","Loader","Error","height","color","wrapperStyle","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor"],"sourceRoot":""}